import csv
import time

import openai
from sklearn.metrics import confusion_matrix

use_pheme = True
use_unverified = False

use_cot = False #no more than 1 of these true at a time
use_manual_cot = True

model_name = "gpt-4"

use_complex_ev = True #pheme only has complex_ev

if use_pheme and not use_complex_ev:
    print("PHEME only has complex evidence!")
    exit()
use_followup_prompt = False

labels = []
types = []
rumours = []
evidence_simple = []
evidence_complex = []

predictions = []
final_labels = []
types_correct = {}
types_wrong = {}

if use_pheme:
    with open("pheme.tsv", newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter="\t")
        for row in spamreader:
            labels.append(row[0])
            types.append(row[1])
            rumours.append(row[2])
            evidence_complex.append(row[3])

else:
    with open("wikipedia.tsv", newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter="\t")
        for row in spamreader:
            labels.append(row[0])
            types.append(row[1])
            rumours.append(row[2])
            evidence_simple.append(row[3])
            evidence_complex.append(row[4])

openai.api_key = "api_key"
output_file = []

def record(text):
    print(text)
    output_file.append(text)

for v, i in enumerate(rumours):
    label = labels[v]
    type = types[v]
    rumour = rumours[v]
    if use_complex_ev:
        ev = evidence_complex[v]
    else:
        ev = evidence_simple[v]
    class_list = "true or false"
    if use_unverified:
        class_list = "true, false, or unknown"
    c_or_r = "rumour"
    if not use_pheme:
        c_or_r = "claim"
    px_1 = "Q: As an expert journalist, classify the following " + c_or_r + " as " + class_list + " using only the provided evidence. " + c_or_r.upper() + ":"
    px_2 = "EVIDENCE:"
    px_3 = "A: let's think step by step."
    if not use_cot:
        px_3 = "A: "

    prompt = px_1 + " " + rumour + " " + px_2 + " " + ev + " " + px_3

    if use_manual_cot:
        if use_pheme: #pheme
            p3_1 = '''Q: As an expert journalist, classify the following rumour as true or false using only the provided evidence. RUMOUR: Go outside sheeple! Low vitamin d levels linked to COVID-19 mortality rates #wakeup #touchgrass EVIDENCE: A new meta-analysis suggests that low vitamin d levels are linked to COVID-19 survival rates.
A: The meta-analysis confirms that COVID survival rates are linked to vitamin D levels, therefore the rumour is true.

Q: As an expert journalist, classify the following rumour as true or false using only the provided evidence. RUMOUR: 7 NEWS an eagle has been filmed carrying away a small dog: #natureismetal EVIDENCE: The video apparently showing an eagle carrying away a dog is revealed to be a hoax generated by AI.
A: The video was fabricated by an AI, so the alleged incident did not occur and the rumour is false.

Q: As an expert journalist, classify the following rumour as true or false using only the provided evidence. RUMOUR: BREAKING NEWS: More hostages have escaped the rapidly escalating situation in Miami. EVIDENCE: People were seen running out of the building, according to eyewitness reports.
A: People running from the building in the context of this situation are probably hostages, therefore the rumour is likely to be true.

Q: As an expert journalist, classify the following rumour as true or false using only the provided evidence. RUMOUR: Donald trump has died by following his own instructions on how to cure coronavirus #oops EVIDENCE: More legal trouble on its way for former US President Donald Trump.
A: It is unlikely that Donald Trump has died if he is actively being litigated against, so this rumour is probably false.

Q: As an expert journalist, classify the following rumour as true or false using only the provided evidence. RUMOUR: The book has over 200 pages. EVIDENCE: The book has 264 pages.
A: 264 is greater than 200, therefore the rumour is true.

Q: As an expert journalist, classify the following rumour as true or false using only the provided evidence. RUMOUR: Alice's birthday is in the last half of the year. EVIDENCE: Alice was born on 10th March 1996.
A: March is not in the last half of the year, therefore the rumour is false.

Q: As an expert journalist, classify the following rumour as true or false using only the provided evidence. RUMOUR:'''
        else: #wiki
            p3_1 = '''Q: As an expert journalist, classify the following claim as true or false using only the provided evidence. CLAIM: Emmental cheese typically contains holes. EVIDENCE: Bacteria within Emmental produce carbon dioxide, creating its charateristic spherical voids.	
A: The spherical voids of carbon dioxide are holes, so the claim is true.	

Q: As an expert journalist, classify the following claim as true or false using only the provided evidence. CLAIM: The best selling game of all time is Tetris. EVIDENCE: Minecraft has sold more copies than Tetris.
A: Since another game has sold more copies than Tetris, this claim is false.

Q: As an expert journalist, classify the following claim as true or false using only the provided evidence. CLAIM: Cows may cause serious injury when provoked. EVIDENCE: The size and weight of a cow makes it difficult to topple by hand.
A: Due to being large animals, cows are probably able to cause serious injury, so the claim is likely to be true.

Q: As an expert journalist, classify the following claim as true or false using only the provided evidence. CLAIM: Krakow does not have a substantial history. EVIDENCE: Krakow, the capital city of Poland, was the first UNESCO World Heritage Site.
A: Its status as a world heritage site suggests that Krakow has a notable history, so this claim is false.

Q: As an expert journalist, classify the following claim as true or false using only the provided evidence. CLAIM: The book has over 200 pages. EVIDENCE: The book has 264 pages.
A: 264 is greater than 200, therefore the claim is true.

Q: As an expert journalist, classify the following claim as true or false using only the provided evidence. CLAIM: Alice's birthday is in the last half of the year. EVIDENCE: Alice was born on 10th March 1996.
A: March is not in the last half of the year, therefore the claim is false.

Q: As an expert journalist, classify the following claim as true or false using only the provided evidence. CLAIM:'''
    prompt = p3_1 + " " + rumour + " " + px_2 + " " + ev + "\nA:"
    prompt2 = "Was the above reasoning deductive, inductive, abductive or analogical reasoning?"
    record("===")
    record(prompt)
    record("INPUT PROMPT > " + type + " " + label)

    if not use_unverified and label == "unverified":
        record("OUT OF SCOPE")
        continue
    final_labels.append(label)

    done = False
    while not done:
        try:
            output = openai.ChatCompletion.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                temperature=0,
                request_timeout=10
            )
            done = True
        except Exception as e:
            print(">", e)
            record("ERROR")

    response = output["choices"][0]["message"]["content"]
    record(response)

    pred = "x"
    false_index = response.lower().rfind("false")
    true_index = response.lower().rfind("true")
    unknown_index = response.lower().rfind("unknown")

    if false_index > true_index and false_index > unknown_index:
        pred = "false"
    elif true_index > false_index and true_index > unknown_index:
        pred = "true"
    elif unknown_index > false_index and unknown_index > true_index:
        pred = "unverified"
    else:
        record("BAD RESPONSE")

    predictions.append(pred)

    if pred == label:
        record("PREDICTION > " + pred + " (correct)")
        if type in types_correct:
            types_correct[type] += 1
        else:
            types_correct[type] = 1
    else:
        record("PREDICTION > " + pred + " (wrong)")
        if type in types_wrong:
            types_wrong[type] += 1
        else:
            types_wrong[type] = 1

    if use_followup_prompt:
        record(prompt2)
        done = False
        while not done:
            try:
                output = openai.ChatCompletion.create(
                    model=model_name,
                    messages=[
                        {"role": "user", "content": prompt},
                        {"role": "assistant", "content": response},
                        {"role": "user", "content": prompt2}
                    ],
                    temperature=0,
                    request_timeout=10
                )
                done = True
            except Exception:
                record("ERROR")

        response2 = output["choices"][0]["message"]["content"]
        record(response2)

    time.sleep(0.5)


record("")
record("PREDICTED")
record("F  T  U")
cm = confusion_matrix(final_labels, predictions)
record(str(cm))
record("")
record("CORRECT")
record(str(types_correct))
record("WRONG")
record(str(types_wrong))


fname = "output"
if use_pheme:
    fname += "_pheme"
else:
    fname += "_wiki"
if use_unverified:
    fname += "_3class"
else:
    fname += "_2class"
if use_complex_ev:
    fname += "_complex"
else:
    fname += "_simple"
fname += ".txt"


with open(fname, "w") as f:
    for item in output_file:
        f.write(item + "\n")